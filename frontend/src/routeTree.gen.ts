/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as UsersIndexImport } from './routes/users/index'
import { Route as TasksIndexImport } from './routes/tasks/index'
import { Route as ProjectsIndexImport } from './routes/projects/index'
import { Route as UsersIdImport } from './routes/users/$id'
import { Route as TasksIdImport } from './routes/tasks/$id'
import { Route as ProjectsIdImport } from './routes/projects/$id'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIndexRoute = UsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => rootRoute,
} as any)

const TasksIndexRoute = TasksIndexImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIndexRoute = ProjectsIndexImport.update({
  id: '/projects/',
  path: '/projects/',
  getParentRoute: () => rootRoute,
} as any)

const UsersIdRoute = UsersIdImport.update({
  id: '/users/$id',
  path: '/users/$id',
  getParentRoute: () => rootRoute,
} as any)

const TasksIdRoute = TasksIdImport.update({
  id: '/tasks/$id',
  path: '/tasks/$id',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsIdRoute = ProjectsIdImport.update({
  id: '/projects/$id',
  path: '/projects/$id',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/$id': {
      id: '/projects/$id'
      path: '/projects/$id'
      fullPath: '/projects/$id'
      preLoaderRoute: typeof ProjectsIdImport
      parentRoute: typeof rootRoute
    }
    '/tasks/$id': {
      id: '/tasks/$id'
      path: '/tasks/$id'
      fullPath: '/tasks/$id'
      preLoaderRoute: typeof TasksIdImport
      parentRoute: typeof rootRoute
    }
    '/users/$id': {
      id: '/users/$id'
      path: '/users/$id'
      fullPath: '/users/$id'
      preLoaderRoute: typeof UsersIdImport
      parentRoute: typeof rootRoute
    }
    '/projects/': {
      id: '/projects/'
      path: '/projects'
      fullPath: '/projects'
      preLoaderRoute: typeof ProjectsIndexImport
      parentRoute: typeof rootRoute
    }
    '/tasks/': {
      id: '/tasks/'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksIndexImport
      parentRoute: typeof rootRoute
    }
    '/users/': {
      id: '/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UsersIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/projects/$id': typeof ProjectsIdRoute
  '/tasks/$id': typeof TasksIdRoute
  '/users/$id': typeof UsersIdRoute
  '/projects': typeof ProjectsIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/projects/$id': typeof ProjectsIdRoute
  '/tasks/$id': typeof TasksIdRoute
  '/users/$id': typeof UsersIdRoute
  '/projects': typeof ProjectsIndexRoute
  '/tasks': typeof TasksIndexRoute
  '/users': typeof UsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/projects/$id': typeof ProjectsIdRoute
  '/tasks/$id': typeof TasksIdRoute
  '/users/$id': typeof UsersIdRoute
  '/projects/': typeof ProjectsIndexRoute
  '/tasks/': typeof TasksIndexRoute
  '/users/': typeof UsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects/$id'
    | '/tasks/$id'
    | '/users/$id'
    | '/projects'
    | '/tasks'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects/$id'
    | '/tasks/$id'
    | '/users/$id'
    | '/projects'
    | '/tasks'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/projects/$id'
    | '/tasks/$id'
    | '/users/$id'
    | '/projects/'
    | '/tasks/'
    | '/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ProjectsIdRoute: typeof ProjectsIdRoute
  TasksIdRoute: typeof TasksIdRoute
  UsersIdRoute: typeof UsersIdRoute
  ProjectsIndexRoute: typeof ProjectsIndexRoute
  TasksIndexRoute: typeof TasksIndexRoute
  UsersIndexRoute: typeof UsersIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ProjectsIdRoute: ProjectsIdRoute,
  TasksIdRoute: TasksIdRoute,
  UsersIdRoute: UsersIdRoute,
  ProjectsIndexRoute: ProjectsIndexRoute,
  TasksIndexRoute: TasksIndexRoute,
  UsersIndexRoute: UsersIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/projects/$id",
        "/tasks/$id",
        "/users/$id",
        "/projects/",
        "/tasks/",
        "/users/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/projects/$id": {
      "filePath": "projects/$id.tsx"
    },
    "/tasks/$id": {
      "filePath": "tasks/$id.tsx"
    },
    "/users/$id": {
      "filePath": "users/$id.tsx"
    },
    "/projects/": {
      "filePath": "projects/index.tsx"
    },
    "/tasks/": {
      "filePath": "tasks/index.tsx"
    },
    "/users/": {
      "filePath": "users/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
